Anonymous function
---------------------------

In Python, anonymous function is a function that is defined without a name.

While normal functions are defined using the def keyword, in Python anonymous functions are defined using the lambda keyword.

Hence, anonymous functions are also called lambda functions.

Syntax
----------

A lambda function in python has the following syntax.

Syntax of Lambda Function in python

lambda arguments: expression

Lambda functions can have any number of arguments but only one expression. The expression is evaluated and returned. Lambda functions can 
be used wherever function objects are required.

Example
------------

square= lambda a: a*a
print(square(10))

Output
----------

100

In the above program, lambda a: a * a is the lambda function. Here a is the argument and a * a is the expression that gets evaluated and returned.

This function has no name. It returns a function object which is assigned to the identifier square. We can now call it as a normal function. The 
statement

square= lambda a: a*a

is nearly the same as

def square(a):
   return a*a

Use of Lambda Function in python
----------------------------------------------

We use lambda functions when we require a nameless function for a short period of time.

In Python, we generally use it as an argument to a higher-order function (a function that takes in other functions as arguments). Lambda functions 
are used along with built-in functions like filter(), map() etc.

Example use with filter()
---------------------------------

The filter() function in Python takes in a function and a list as arguments.

The function is called with all the items in the list and a new list is returned which contains items for which the function evaluats to True.

Here is an example use of filter() function to filter out only even numbers from a list.